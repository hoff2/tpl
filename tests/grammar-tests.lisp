(defparameter *exp-grammar*
  '((exp    (term expp))
    (expp   (addop term expp))
    (expp   (empty))
    (term   (factor termp))
    (termp  (mulop factor termp))
    (termp  (empty))
    (factor (lparen exp rparen))
    (factor (number))
    (addop  (plus))
    (addop  (minus))
    (mulop  (times))))

(defun fftests-exp ()
  (setup-parser :grammar *exp-grammar*
	        :ast-types nil
	        :consume-func nil
	        :peek-func nil)
  (assert (set= (follow-set 'exp)    '(eof rparen)))
  (assert (set= (follow-set 'expp)   '(eof rparen)))
  (assert (set= (follow-set 'addop)  '(lparen number)))
  (assert (set= (follow-set 'term)   '(eof rparen plus minus)))
  (assert (set= (follow-set 'termp)  '(eof rparen plus minus)))
  (assert (set= (follow-set 'mulop)  '(lparen number)))
  (assert (set= (follow-set 'factor) '(eof rparen plus minus times)))
  (assert (set= (first-set 'exp)     '(lparen number)))
  (assert (set= (first-set 'expp)    '(plus minus empty)))
  (assert (set= (first-set 'addop)   '(plus minus)))
  (assert (set= (first-set 'term)    '(lparen number)))
  (assert (set= (first-set 'termp)   '(times empty)))
  (assert (set= (first-set 'mulop)   '(times)))
  (assert (set= (first-set 'factor)  '(lparen number)))
  (assert (equalp (parse-table 'exp 'lparen)
		  '((exp (term expp)))))
  (assert (equalp (parse-table 'exp 'number)
		  '((exp (term expp)))))
  (assert (equalp (parse-table 'exp 'rparen) nil))
  (assert (equalp (parse-table 'exp 'plus) nil))
  (assert (equalp (parse-table 'exp 'minus) nil))
  (assert (equalp (parse-table 'exp 'times) nil))
  (assert (equalp (parse-table 'exp 'eof) nil))
  (assert (equalp (parse-table 'expp 'lparen) nil))
  (assert (equalp (parse-table 'expp 'number) nil))
  (assert (equalp (parse-table 'expp 'rparen)
		  '((expp (empty)))))
  (assert (equalp (parse-table 'expp 'plus)
		  '((expp (addop term expp)))))
  (assert (equalp (parse-table 'expp 'minus)
		  '((expp (addop term expp)))))
  (assert (equalp (parse-table 'expp 'times) nil))
  (assert (equalp (parse-table 'expp 'eof)
		  '((expp (empty)))))
  (assert (equalp (parse-table 'addop 'lparen) nil))
  (assert (equalp (parse-table 'addop 'number) nil))
  (assert (equalp (parse-table 'addop 'rparen) nil))
  (assert (equalp (parse-table 'addop 'plus)
		  '((addop (plus)))))
  (assert (equalp (parse-table 'addop 'minus)
		  '((addop (minus)))))
  (assert (equalp (parse-table 'addop 'times) nil))
  (assert (equalp (parse-table 'addop 'eof) nil))
  (assert (equalp (parse-table 'term 'lparen)
		  '((term (factor termp)))))
  (assert (equalp (parse-table 'term 'number)
		  '((term (factor termp)))))
  (assert (equalp (parse-table 'term 'rparen) nil))
  (assert (equalp (parse-table 'term 'plus) nil))
  (assert (equalp (parse-table 'term 'minus) nil))
  (assert (equalp (parse-table 'term 'times) nil))
  (assert (equalp (parse-table 'term 'eof) nil))
  (assert (equalp (parse-table 'termp 'lparen) nil))
  (assert (equalp (parse-table 'termp 'number) nil))
  (assert (equalp (parse-table 'termp 'rparen)
		  '((termp (empty)))))
  (assert (equalp (parse-table 'termp 'plus)
		  '((termp (empty)))))
  (assert (equalp (parse-table 'termp 'minus)
		  '((termp (empty)))))
  (assert (equalp (parse-table 'termp 'times)
		  '((termp (mulop factor termp)))))
  (assert (equalp (parse-table 'termp 'eof)
		  '((termp (empty)))))
  (assert (equalp (parse-table 'mulop 'lparen) nil))
  (assert (equalp (parse-table 'mulop 'number) nil))
  (assert (equalp (parse-table 'mulop 'rparen) nil))
  (assert (equalp (parse-table 'mulop 'plus) nil))
  (assert (equalp (parse-table 'mulop 'minus) nil))
  (assert (equalp (parse-table 'mulop 'times) 
		  '((mulop (times)))))
  (assert (equalp (parse-table 'mulop 'eof) nil))
  (assert (equalp (parse-table 'factor 'lparen)
		  '((factor (lparen exp rparen)))))
  (assert (equalp (parse-table 'factor 'number)
		  '((factor (number)))))
  (assert (equalp (parse-table 'factor 'rparen) nil))
  (assert (equalp (parse-table 'factor 'plus) nil))
  (assert (equalp (parse-table 'factor 'minus) nil))
  (assert (equalp (parse-table 'factor 'times) nil))
  (assert (equalp (parse-table 'factor 'eof) nil)))

; --------------------------------------------

(defparameter *seq-grammar*
  '((stmt-seq  (stmt stmt-seqp))
    (stmt-seqp (semicolon stmt-seq))
    (stmt-seqp (empty))
    (stmt      (s))))

(defun fftests-seq ()
  (setup-parser :grammar *seq-grammar*
	        :ast-types nil
	        :consume-func nil
	        :peek-func nil)
  (assert (set= (follow-set 'stmt-seq)  '(eof)))
  (assert (set= (follow-set 'stmt)      '(semicolon eof)))
  (assert (set= (follow-set 'stmt-seqp) '(eof)))
  (assert (set= (first-set 'stmt-seq)   '(s)))
  (assert (set= (first-set 'stmt)       '(s)))
  (assert (set= (first-set 'stmt-seqp)  '(semicolon empty)))
  (assert (equalp (parse-table 'stmt-seq 's)
		  '((stmt-seq (stmt stmt-seqp)))))
  (assert (equalp (parse-table 'stmt-seq 'semicolon) nil))
  (assert (equalp (parse-table 'stmt-seq 'eof) nil))
  (assert (equalp (parse-table 'stmt 's)
		  '((stmt (s)))))
  (assert (equalp (parse-table 'stmt 'semicolon) nil))
  (assert (equalp (parse-table 'stmt 'eof) nil))
  (assert (equalp (parse-table 'stmt-seqp 's) nil))
  (assert (equalp (parse-table 'stmt-seqp 'semicolon)
		  '((stmt-seqp (semicolon stmt-seq)))))
  (assert (equalp (parse-table 'stmt-seqp 'eof)
		  '((stmt-seqp (empty))))))

; --------------------------------------------

(defparameter *if-grammar*
  '((statement    (if-statement))
    (statement    (other))
    (if-statement (ifw lparen exp rparen statement else-part))
    (else-part    (elsew statement))
    (else-part    (empty))
    (exp          (zero))
    (exp          (one))))

(defun fftests-if ()
  (setup-parser :grammar *if-grammar*
	        :ast-types nil
	        :consume-func nil
	        :peek-func nil)
  (assert (set= (follow-set 'statement)    '(eof elsew)))
  (assert (set= (follow-set 'if-statement) '(eof elsew)))
  (assert (set= (follow-set 'else-part)    '(eof elsew)))
  (assert (set= (follow-set 'exp)          '(rparen)))
  (assert (set= (first-set 'statement)     '(ifw other)))
  (assert (set= (first-set 'if-statement)  '(ifw)))
  (assert (set= (first-set 'else-part)     '(elsew empty)))
  (assert (set= (first-set 'exp)           '(zero one)))
  (assert (equalp (parse-table 'statement 'ifw)
		  '((statement (if-statement)))))
  (assert (equalp (parse-table 'statement 'other)
		  '((statement (other)))))
  (assert (equalp (parse-table 'statement 'elsew) nil))
  (assert (equalp (parse-table 'statement 'zero) nil))
  (assert (equalp (parse-table 'statement 'one) nil))
  (assert (equalp (parse-table 'statement 'eof) nil))
  (assert (equalp (parse-table 'if-statement 'ifw)
		  '((if-statement
		     (ifw lparen exp rparen statement else-part)))))
  (assert (equalp (parse-table 'if-statement 'other) nil))
  (assert (equalp (parse-table 'if-statement 'elsew) nil))
  (assert (equalp (parse-table 'if-statement 'zero) nil))
  (assert (equalp (parse-table 'if-statement 'one) nil))
  (assert (equalp (parse-table 'if-statement 'eof) nil))
  (assert (equalp (parse-table 'else-part 'ifw) nil))
  (assert (equalp (parse-table 'else-part 'other) nil))
  (assert (equalp (parse-table 'else-part 'elsew)
		  '((else-part (elsew statement))
		    (else-part (empty)))))
  (assert (equalp (parse-table 'else-part 'zero) nil))
  (assert (equalp (parse-table 'else-part 'one) nil))
  (assert (equalp (parse-table 'else-part 'eof)
		  '((else-part (empty)))))
  (assert (equalp (parse-table 'exp 'ifw) nil))
  (assert (equalp (parse-table 'exp 'other) nil))
  (assert (equalp (parse-table 'exp 'elsew) nil))
  (assert (equalp (parse-table 'exp 'zero)
		  '((exp (zero)))))
  (assert (equalp (parse-table 'exp 'one)
		  '((exp (one)))))
  (assert (equalp (parse-table 'exp 'eof) nil)))

; --------------------------------------------

(defun all-first-follow-tests ()
  (fftests-if)
  (fftests-seq)
  (fftests-exp))