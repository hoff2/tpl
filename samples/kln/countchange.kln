// Counts out change and returns number of different ways to do so
// Adapted from SICP, Ch. 1, Sec. 1.2
// Should be a syntactically correct Klein program.  Whether it's a
// logically correct change-combination-counter is unknown :D

countChange(amount : integer) : integer
   cc(amount, 5)

cc(amount : integer, ndenom : integer) : integer
   if amount = 0 then
      1
   else
      if amount < 0 then
         0
      else
         if ndenom = 0 then
            0
         else
            cc(amount, ndenom - 1) + cc (amount - denom(ndenom), ndenom)
         endif
      endif
   endif

denom(n : integer) : integer
   if n = 1 then
      1
   else
      if n = 2 then
         5
      else
         if n = 3 then
            10
         else
            if n = 4 then
               25
            else
               // it better be 5 then!!
               50
            endif
         endif
      endif
   endif

main(amount : integer) : integer
   print countChange(amount, 5)

